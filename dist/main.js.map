{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/scripts/utils.js","webpack://javascript-project/./src/scripts/moving_object.js","webpack://javascript-project/./src/scripts/projectile.js","webpack://javascript-project/./src/scripts/timer.js","webpack://javascript-project/./src/scripts/ship.js","webpack://javascript-project/./src/scripts/explosion.js","webpack://javascript-project/./src/scripts/player_ship.js","webpack://javascript-project/./src/scripts/enemy_ship.js","webpack://javascript-project/./src/scripts/boss.js","webpack://javascript-project/./src/scripts/sound.js","webpack://javascript-project/./src/scripts/game.js","webpack://javascript-project/./src/scripts/game_view.js","webpack://javascript-project/./src/index.js"],"sourcesContent":["// vector and collision math related helper functions go here\n\n// rectangle to rectangle collision \n// takes in 2 box objects that have x/y positions, width, and height\nexport function rectangleCollision(box1, box2) {\n  return (\n    box1.x < box2.x + box2.width &&\n    box1.x + box1.width > box2.x &&\n    box1.y < box2.y + box2.height &&\n    box1.height + box1.y > box2.y\n  )\n}\n\n// angled rectangle collision (seperate axis theorem)\n\n// rectangle to circle collision\n\n// circle to circle collision\n\n// vector scaling calculation\nexport function vectorScale(vector, newMagnitude) {\n  const magnitude = Math.sqrt(vector[0]**2 + vector[1]**2);\n  const scale = newMagnitude/magnitude;\n  return [vector[0] * scale, vector[1] * scale]\n}\n\n// vector calculation between two points\n\n// new angle calculation","// MovingObject is the top parent class for ships, projectiles, explosions, etc.\n\nimport { rectangleCollision } from \"./utils\";\n\nclass MovingObject {\n  // for smoothing gameplay based on fps\n  static NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\n  // takes in an argument object with the following:\n  constructor(argsObject) {\n    this.position = argsObject[\"position\"];             // initial canvas position [int, int]\n    this.velocity = argsObject[\"velocity\"];             // initial velocity [int, int]\n    this.speed = argsObject[\"speed\"];                   // initial speed\n    this.health = argsObject[\"health\"];                 // initial health\n    this.game = argsObject[\"game\"];                     // Game object\n    this.width = argsObject[\"width\"];                   // image width\n    this.height = argsObject[\"height\"];                 // image height\n    this.image = argsObject[\"image\"];                   // image url\n    this.type = argsObject[\"type\"];                     // type can be 'enemy', 'boss', 'player', or 'explosion'\n    this.rotationAngle = argsObject[\"rotation\"] || 0;   // (optional) image rotation angle in degrees\n\n    // stores itself in the Game with an id\n    this.id = this.game.idCounter++;\n    this.game.allMovingObjects[this.type][this.id] = this;\n  }\n\n  draw(ctx) {\n    // ctx.drawImage(this.image, this.position[0], this.position[1], this.width, this.height);\n\n    // rotate from center\n    const [x, y] = this.position;\n    const [centerX, centerY] = [x + (this.width/2), y + (this.height/2)]\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    ctx.rotate((Math.PI / 180) * this.rotationAngle);\n    ctx.translate(-centerX, -centerY);\n    ctx.drawImage(this.image, x, y, this.width, this.height);\n    ctx.restore();\n  }\n\n  // checks collisions against all hitboxes of the other MovingObject\n  collideCheck(otherObj) {\n    // hitBoxCollisions is used by subclasses with more complex logic\n    const hitBoxCollisions = [];\n    \n    this.getHitbox().forEach((thisBox, idx) => {\n      const collisionFound = otherObj.getHitbox().some(otherBox => { \n        // rectangleCollision is a utility function for mathematically determining collisions\n        return rectangleCollision(thisBox, otherBox) \n      })\n\n      if (collisionFound) hitBoxCollisions.push(idx); \n    })\n\n    if (hitBoxCollisions.length > 0) {\n      this.handleCollided(otherObj, hitBoxCollisions);\n    }\n  }\n\n  // will be overwritten by subclasses with more complex logic\n  handleCollided(otherObj) {\n    const otherObjClass = otherObj.constructor.name;\n    \n    // three cases: ship to projectile, player to enemy, player to boss\n    if (otherObjClass === \"Projectile\") {\n      const damage = otherObj.health;\n      otherObj.remove();\n      this.damageTaken(damage);\n    } else if (otherObjClass === \"EnemyShip\") {\n      const damage = 1;\n      this.damageTaken(damage);\n    } else if (otherObjClass === \"Boss\") {\n      const damage = 3;\n      this.damageTaken(damage);\n    }\n  }\n\n  getHitbox() {\n    const [x, y] = this.position;\n    const width = this.width;\n    const height = this.height;\n    return [{\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }]\n  }\n\n  // movement is smoothed out during fps changes\n  move(timeDelta) {\n    this.updateVelocity();\n    const velocityScale = timeDelta / MovingObject.NORMAL_FRAME_TIME_DELTA;\n    const offsetX = this.velocity[0] * velocityScale;\n    const offsetY = this.velocity[1] * velocityScale;\n\n    const newX = this.position[0] + offsetX;\n    const newY = this.position[1] + offsetY;\n\n    this.handleBounds([newX, newY])\n  }\n\n  // updates the position with a new [int, int]\n  handleBounds(newPosition) {\n    // to be changed in sub classes as needed\n    this.position = newPosition;\n  }\n\n  updateVelocity() {\n    // to be implemented in sub classes as needed\n  }\n\n  // these functions take in a y position as int\n  inUpperYHeightBounds(y) {\n    return (y <= this.game.canvasHeight + this.height);\n  }\n\n  inUpperYBounds(y) {\n    return (y >= 0);\n  }\n\n  inLowerYBounds(y) {\n    return (y <= this.game.canvasHeight - this.height);\n  }\n  \n  inYBounds(y) {\n    return (this.inUpperYBounds(y) && this.inLowerYBounds(y));\n  }\n\n  // these functions take in a x position as int\n  inUpperXBounds(x) {\n    return (x >= 0);\n  }\n\n  inLowerXBounds(x) {\n    return (x <= this.game.canvasWidth - this.width);\n  }\n\n  inXBounds(x) {\n    return (this.inUpperXBounds(x) && this.inLowerXBounds(x));\n  }\n\n  // takes in a position as [int, int]\n  inBounds(position) {\n    return this.inXBounds(position[0]) && this.inYBounds(position[1]);\n  }\n\n  remove() {\n    delete this.game.allMovingObjects[this.type][this.id];\n  }\n}\n\nexport default MovingObject;","// Top level class for all projectiles shot from ships\n\nimport MovingObject from \"./moving_object\";\n\nclass Projectile extends MovingObject {\n  // args contains MovingObject args and an origin\n  constructor(args) {\n    // Projectile health determines damage dealt\n    args.objArgs.type = \"projectiles\";\n    super(args.objArgs);\n    this.origin = args.origin;  // a string of either 'player' or 'enemy'\n  }\n\n  // projectiles are also removed when they collide with ships, handled by Ship objects\n  handleBounds(newPosition) {\n    if (!this.inBounds(newPosition)) {\n      super.remove();\n    } else {\n      this.position = newPosition\n    }\n  }\n}\n\nexport default Projectile;","// Timer class wraps setTimeouts with added pause and resume functionality\n\nclass Timer {\n  // callback function to be called after the delay expires\n  // delay is in milliseconds\n  constructor(game, callback, delay) {\n    // all Timers are kept tracked of in Game.timers\n    this.game = game;\n    this.id = this.game.idCounter++;\n    this.game.timers[this.id] = this;\n\n    //  Timers will also delete themselves after the callback is played\n    this.timerCallback = () => {\n      callback();\n      delete this.game.timers[this.id];\n    }\n\n    this.startTime = Date.now();\n    this.delay = delay;\n    this.timeoutId = setTimeout(this.timerCallback.bind(this), this.delay);\n  }\n\n  // pause and resume simply clear and create setTimeouts with new remaining delays\n  pause() {\n    clearTimeout(this.timeoutId);\n    this.delay -= Date.now() - this.startTime;\n  }\n\n  resume() {\n    this.startTime = Date.now();\n    this.timeoutId = setTimeout(this.timerCallback.bind(this), this.delay)\n  }\n\n  clear() {\n    clearTimeout(this.timeoutId);\n    delete this.game.timers[this.id];\n  }\n}\n\nexport default Timer;","// Ship is the top parent class for player, enemy, and boss ships\n\nimport MovingObject from \"./moving_object\";\nimport Projectile from \"./projectile\";\nimport Timer from \"./timer\";\n\nclass Ship extends MovingObject {\n  // takes in constructor argument objects for MovingObject and Projectile\n  // and takes in an array of shooting pattern objects\n  constructor(objArgs, projectileArgs, patternArgs) {\n    super(objArgs);\n    this.projectileArgs = projectileArgs;\n    this.patternArgs = patternArgs;\n  }\n\n  // ships can have multiple projectile patterns and possible batch firing\n  // each pattern has it's own cooldown\n  shootProjectile() {\n    this.patternArgs.forEach((pattern, idx) => {\n      // fire pattern if off cooldown and ship in game bounds\n      if (!pattern.onCooldown && this.inBounds(this.position)) {\n        // batch firing\n        for (let i = 0; i < pattern.batchFireNum; i ++) {\n          new Timer(this.game, () => {\n            // only fire if ship still alive when timer callback activates\n            if (this.health > 0) {\n              // create new Projectile at each position in the pattern\n              pattern.positionDeltas.forEach(delta => {\n                const [x, y] = this.position;\n                const [dx, dy] = delta;\n                const startPosition = [x + dx, y + dy];\n\n                const projArgs = this.projectileArgs[pattern.projectileArgIndex];\n                projArgs.objArgs.position = startPosition;\n\n                new Projectile(projArgs);\n              })\n            }\n          }, pattern.batchFireInterval * i);\n        }\n\n        // play projectile sound\n        const projSound = this.projectileArgs[pattern.projectileArgIndex].projectileSound;\n        this.playShootSound(projSound);\n        \n        // set cooldown and start timer to reset it\n        pattern.onCooldown = true;\n        const batchCooldownOffset = pattern.batchFireInterval * pattern.batchFireNum;\n        pattern.timer = new Timer(this.game, this.resetCooldown.bind(this, idx), (pattern.cooldown + batchCooldownOffset));\n      }\n    })\n  }\n\n  // projectileSound is a string of either 'playerProjectile', 'bossProjectile', or 'enemyProjectile'\n  playShootSound(projectileSound) {\n    this.game.sounds.add(projectileSound);\n  }\n\n  // takes in an index for the shooting patterns array\n  resetCooldown(index) {\n    this.patternArgs[index].onCooldown = false;\n    this.patternArgs[index].timer = null;\n  }\n\n  damageTaken(damage) {\n    this.health -= damage;\n    if (this.health <= 0) this.remove();\n  }\n}\n\nexport default Ship;","// Explosion class handles different explosion types for death animations\n\nimport MovingObject from \"./moving_object\";\n\nclass Explosion extends MovingObject {\n  // position and velocityDeltas are [int, int]\n  // explosionType is a string of either \"minor\" or \"major\"\n  constructor(game, size, position, explosionType, velocityDelta) {\n    const image = document.createElement(\"img\");\n    \n    // minor for enemy ships, major for player/boss death\n    if (explosionType === \"minor\") {\n      image.src = \"src/assets/images/explosion1.png\";\n    } else if (explosionType === \"major\" ) {\n      image.src = \"src/assets/images/explosion2.png\";\n    }\n\n    const argsObj = {\n      position: position,\n      velocity: [0, 0],\n      speed: 0,\n      health: 0,\n      game: game,\n      width: size,\n      height: size,\n      image: image,\n      type: \"explosions\"\n    }\n    super(argsObj);\n\n    if (explosionType === \"minor\") {\n      this.maxFrames = 20;\n      this.imgSize = 192;\n      this.cutSize = 5;\n    } else if (explosionType === \"major\" ) {\n      this.maxFrames = 48;\n      this.imgSize = 240;\n      this.cutSize = 8;\n    }\n\n    this.frame = 0;\n    this.velocityDelta = velocityDelta;\n  }\n\n  // explosions are animated sprites with multiple frames\n  draw(ctx) {\n    const yOffset = Math.floor(this.frame/this.cutSize);\n    const xOffset = this.frame % this.cutSize;\n    ctx.drawImage(this.image, \n                  this.imgSize*xOffset, this.imgSize*yOffset, this.imgSize, this.imgSize, \n                  this.position[0], this.position[1], this.width, this.height);\n    this.frame += 1;\n\n    if (this.frame >= this.maxFrames) {\n      this.remove();\n    }\n  }\n\n  updateVelocity() {\n    this.velocity[0] += this.velocityDelta[0];\n    this.velocity[1] += this.velocityDelta[1];\n  }\n}\n\nexport default Explosion;","// The player, aka the Galactic Defender\n\nimport Ship from \"./ship\";\nimport Explosion from \"./explosion\";\nimport Timer from \"./timer\";\nimport { vectorScale } from \"./utils\";\n\nclass PlayerShip extends Ship {\n  static SPEED = 5;\n  static MAX_HEALTH = 10;\n\n  constructor(game) {\n    // Ship/MovingObject related arguments\n    let image = document.createElement(\"img\");\n    image.src = \"src/assets/images/player1.png\";\n    let height = 48;\n    let width = 37;\n    const objArgs = {\n      width: width,\n      height: height,\n      position: [Math.floor(game.canvasWidth / 2), game.canvasHeight - height],\n      velocity: [0, 0],\n      speed: PlayerShip.SPEED,\n      health: PlayerShip.MAX_HEALTH,\n      game: game,\n      image: image,\n      type: \"player\"\n    }\n\n    // Projectile related arguments\n    image = document.createElement(\"img\");\n    image.src = \"src/assets/images/player_projectile.png\";\n    const projectileArgs = [{\n      objArgs: {\n        velocity: [0, -10],\n        speed: 10,\n        health: 1,\n        game: game,\n        width: 5,\n        height: 20,\n        image: image\n      },\n      type: \"bullet\",\n      origin: \"player\",\n      projectileSound: \"playerProjectile\"\n    }]\n\n    // projectile pattern\n    const patternArgs = [{\n      positionDeltas: [[width/(2.3), 0]],\n      batchFireNum: 1,\n      batchFireInterval: 0,\n      cooldown: 250,\n      onCooldown: false,\n      timer: null,\n      projectileArgIndex: 0\n    }]\n\n    super(objArgs, projectileArgs, patternArgs);\n\n    // player controlled movements\n    this.keysPressed = {\n      up: false,\n      down: false,\n      left: false,\n      right: false,\n      shoot: false\n    }\n    \n    this.disabled = false;\n    this.invincible = false;\n  }\n\n  // player ship unique hitboxes\n  getHitbox() {\n    const box1 = {\n      x: this.position[0] + (this.width / 3),\n      y: this.position[1],\n      width: this.width / 3,\n      height: this.height\n    }\n\n    const box2 = {\n      x: this.position[0],\n      y: this.position[1] + (this.height * .65),\n      width: this.width,\n      height: this.height/5\n    }\n\n    return [box1, box2];\n  }\n\n  // velocity updated based on player controlled movements\n  updateVelocity() {\n    let newVelocity = [0, 0];\n\n    // when disabled, player auto moves downwards\n    if (this.disabled) {\n      newVelocity[1] = 2;\n    } else if (this.game.gameView.mouseFollow && this.game.gameView.mousePosition) {\n      // mouse/touch controlled movement handling\n      // movement is smoothed out for finer controls\n      const xDiff = this.game.gameView.mousePosition.x - (this.position[0] + (this.width / 2));\n      const yDiff = this.game.gameView.mousePosition.y - (this.position[1] + (this.height / 2));\n      const deadzone = 2;\n\n      if (xDiff > deadzone) {\n        newVelocity[0] += Math.min(this.speed, xDiff);\n      } else if (xDiff < -deadzone) {\n        newVelocity[0] -= Math.min(this.speed, -xDiff);\n      }\n\n      if (yDiff > deadzone) {\n        newVelocity[1] += Math.min(this.speed, yDiff);\n      } else if (yDiff < -deadzone) {\n        newVelocity[1] -= Math.min(this.speed, -yDiff);\n      }\n\n      if (newVelocity[0] && newVelocity[1]) {\n        const speed = (Math.abs(newVelocity[0]) + Math.abs(newVelocity[1])) / 2;\n        newVelocity = vectorScale(newVelocity, speed);\n      }\n    } else {\n      // keyboard controlled movement handling\n      if (this.keysPressed.right) newVelocity[0] += this.speed;\n      if (this.keysPressed.left) newVelocity[0] -= this.speed;\n      if (this.keysPressed.up) newVelocity[1] -= this.speed;\n      if (this.keysPressed.down) newVelocity[1] += this.speed;\n\n      if (newVelocity[0] && newVelocity[1]) newVelocity = vectorScale(newVelocity, this.speed);\n    }\n\n    this.velocity = newVelocity;\n  }\n\n  // shooting also controlled by player\n  shootProjectile() {\n    if (this.keysPressed.shoot && !this.disabled) super.shootProjectile();\n  }\n\n  // player must be within game screen at all times\n  handleBounds(newPosition) {\n    if (this.inXBounds(newPosition[0])) this.position[0] = newPosition[0];\n    if (this.inYBounds(newPosition[1])) this.position[1] = newPosition[1];\n  }\n\n  // player gets 1 sec of invicibility after taking damage\n  damageTaken(damage) {\n    if (!this.invincible && this.health >= 0) {\n      super.damageTaken(damage);\n      this.invincible = true;\n      this.game.sounds.add(\"playerHurt\");\n      new Timer(this.game, this.resetInvincibility.bind(this), 1000);\n    }\n  }\n\n  resetInvincibility() {\n    this.invincible = false;\n  }\n\n  // player unique death animation, and activates game over logic\n  remove() {\n    if (!this.disabled) { \n      this.disabled = true;\n\n      new Timer(this.game, () => {\n        const posX = this.position[0] - 40;\n        const posY = this.position[1] - 20;\n        new Explosion(this.game, 100, [posX, posY], \"major\", [0, 0]);\n        super.remove();\n        this.game.sounds.playMajorSound(\"playerDeath\");\n        new Timer(this.game, this.game.setGameOver.bind(this.game), 3000);\n      }, 1000)\n    }\n  }\n}\n\nexport default PlayerShip;","// Low level enemies that move top to bottom\n// shooting 1 bullet downwards at consistent intervals\n\nimport Ship from \"./ship\";\nimport Explosion from \"./explosion\";\n\nclass EnemyShip extends Ship {\n  // posX is the initial x position\n  // cooldown is in milliseconds\n  constructor(game, posX, speed, cooldown) {\n    // Ship/MovingObject related arguments\n    let image = document.createElement(\"img\");\n    image.src = \"src/assets/images/enemy1.png\";\n    let height = 40;\n    let width = 46;\n    let health = 1;\n    let projectileDmg = 1;\n\n    // in case the random position clips the ship image out of bounds\n    if (posX < 0 - width) {\n      posX = 0;\n    } else if (posX > game.canvasWidth - width) {\n      posX = game.canvasWidth - width;\n    }\n\n    const objArgs = {\n      width: width,\n      height: height,\n      position: [posX, 0 - (height * 2)],\n      velocity: [0, speed],\n      speed: speed,\n      health: health,\n      game: game,\n      image: image,\n      type: \"enemies\"\n    }\n\n    // Projectile related arguments\n    image = document.createElement(\"img\");\n    image.src = \"src/assets/images/enemy_projectile.png\";\n    const projectileArgs = [{\n      objArgs: {\n        velocity: [0, 8],\n        speed: 8,\n        health: projectileDmg,\n        game: game,\n        width: 5,\n        height: 20,\n        image: image\n      },\n      type: \"bullet\",\n      origin: \"enemy\",\n      projectileSound: \"enemyProjectile\"\n    }]\n\n    // projectile pattern\n    const patternArgs = [{\n      positionDeltas: [[width/(2.25), 10]],\n      batchFireNum: 1,\n      batchFireInterval: 0,\n      cooldown: cooldown,\n      onCooldown: false,\n      timer: null,\n      projectileArgIndex: 0\n    }]\n\n    super(objArgs, projectileArgs, patternArgs);\n  }\n\n  // enemy ships simply move from top to bottom\n  // removed once they get below the screen\n  handleBounds(newPosition) {\n    if (!this.inUpperYHeightBounds(newPosition[1])) {\n      this.remove();\n    } else {\n      this.position = newPosition;\n    }\n  }\n\n  remove() {\n    if (this.health <= 0) {\n      this.game.sounds.add(\"explosion\");\n      new Explosion(this.game, 80, this.position, \"minor\", [0, 0.25]);\n      this.game.score += 50;\n    }\n\n    super.remove();\n    this.game.enemiesRemaining -= 1;\n  }\n}\n\nexport default EnemyShip;","// The big bad boss, the final enemy in a level\n// Defeat the boss to win and save the galaxy!\n\nimport Ship from \"./ship\";\nimport Explosion from \"./explosion\";\nimport Timer from \"./timer\";\n\nclass Boss extends Ship {\n  static MAX_HEALTH = 50;\n\n  constructor(game) {\n    // Ship/Moving Object related arguments\n    let image = document.createElement(\"img\");\n    image.src = \"src/assets/images/boss1.png\";\n    let height = 220;\n    let width = 250\n    let health = Boss.MAX_HEALTH;\n    let projectileDmg = 2;\n\n    const objArgs = {\n      width: width,\n      height: height,\n      position: [(game.canvasWidth/2) - (width/2), 0 - (height*2)],\n      velocity: [0, 1],\n      speed: 1,\n      health: health,\n      game: game,\n      image: image,\n      type: \"enemies\"\n    }\n\n    // Projectile related arguments\n    image = document.createElement(\"img\");\n    image.src = \"src/assets/images/enemy_projectile.png\";\n    const projectileArgs = [{\n      objArgs: {\n        velocity: [0, 8],\n        speed: 8,\n        health: projectileDmg,\n        game: game,\n        width: 10,\n        height: 40,\n        image: image\n      },\n      type: \"bullet\",\n      origin: \"enemy\",\n      projectileSound: \"bossProjectile\"\n    }]\n\n    // boss projectile patterns, to be activated based on boss phase\n    const patternArgs = [{\n      positionDeltas: [[18, 200], [width-32, 200]],\n      batchFireNum: 1,\n      batchFireInterval: 0,\n      cooldown: 1000,\n      onCooldown: true,\n      timer: null,\n      projectileArgIndex: 0\n    },\n    {\n      positionDeltas: [[60, 210], [width-76, 210]],\n      batchFireNum: 2,\n      batchFireInterval: 150,\n      cooldown: 2000,\n      onCooldown: true,\n      timer: null,\n      projectileArgIndex: 0\n    },\n    {\n      positionDeltas: [[75, 180], [width-88, 180]],\n      batchFireNum: 2,\n      batchFireInterval: 150,\n      cooldown: 1000,\n      onCooldown: true,\n      timer: null,\n      projectileArgIndex: 0\n    },\n    {\n      positionDeltas: [[100, 160], [width - 110, 160]],\n      batchFireNum: 3,\n      batchFireInterval: 150,\n      cooldown: 2000,\n      onCooldown: true,\n      timer: null,\n      projectileArgIndex: 0\n    }]\n\n    super(objArgs, projectileArgs, patternArgs);\n  }\n\n  // box1 is the weakspot\n  getHitbox() {\n    const box1 = {\n      x: this.position[0] + 85,\n      y: this.position[1] + 90,\n      width: 80,\n      height: 70\n    }\n\n    const box2 = {\n      x: this.position[0] + 10,\n      y: this.position[1] + 90,\n      width: (this.width - 100) / 2,\n      height: this.height - 110\n    }\n\n    const box3 = {\n      x: this.position[0] + 165,\n      y: this.position[1] + 90,\n      width: (this.width - 100) / 2,\n      height: this.height - 110\n    }\n\n    const box4 = {\n      x: this.position[0] + 45,\n      y: this.position[1] + 30,\n      width: 155,\n      height: 60\n    }\n\n    return [box1, box2, box3, box4];\n  }\n\n  // only takes damage if weakpoint hit (index 0 is the hitbox1 weakpoint)\n  // takes in the colliding MovingObject and an array of hitbox collision positions as [[int, int]]\n  handleCollided(otherObj, hitboxesCollided) {\n    const otherObjClass = otherObj.constructor.name;\n\n    if (otherObjClass === \"Projectile\") {\n      if (hitboxesCollided.includes(0)) {\n        const damage = otherObj.health;\n        this.damageTaken(damage);\n      }\n      otherObj.remove();\n    }\n  }\n\n  // Boss will slowly move down center from the top during cutscene\n  // then move side to side throughout the fight at normal speed \n  updateVelocity() {\n    if (this.movementDisabled) return \n\n    if (this.position[1] > 0) {\n      this.speed = 1.5;\n      if (this.velocity[0] === 0 || this.position[0] < 0) {\n        if (this.velocity[0] === 0) {\n          new Timer(this.game, this.resetCooldown.bind(this, 0), 1250)\n          this.game.sounds.switchBGM(\"bossBGM\");\n          this.game.player.disabled = false;\n        }\n        this.velocity = [this.speed, 0];\n      } else if (this.position[0] > this.game.canvasWidth - this.width) {\n        this.velocity = [-this.speed, 0];\n      }\n    }\n  }\n\n  // Boss shooting patterns updated based on health remaining\n  updateShootingPattern() {\n    if (this.health === 20) {\n      this.patternArgs[0].timer?.clear();\n      this.patternArgs[1].timer?.clear();\n      this.patternArgs[2].timer?.clear();\n      this.patternArgs[0].onCooldown = false;\n      this.patternArgs[1].onCooldown = false;\n      this.patternArgs[2].onCooldown = false;\n      this.patternArgs[3].onCooldown = false;\n    } else if (this.health === 30) {\n      this.patternArgs[0].timer?.clear();\n      this.patternArgs[1].timer?.clear();\n      this.patternArgs[0].onCooldown = false;\n      this.patternArgs[1].onCooldown = false;\n      this.patternArgs[2].onCooldown = false;\n    } else if (this.health === 40) {\n      this.patternArgs[0].timer?.clear();\n      this.patternArgs[0].onCooldown = false;\n      this.patternArgs[1].onCooldown = false;\n    }\n  }\n\n  shootProjectile() {\n    if (!this.disabled) super.shootProjectile();\n  }\n\n  damageTaken(damage) {\n    if (!this.disabled) {\n      super.damageTaken(damage);\n      this.updateShootingPattern();\n    }\n  }\n\n  // Boss death animations plays alot of minor explosions and ends with big finale explosion\n  // Then proceeds to game win after a delay\n  remove() {\n    this.game.score += 1000;\n    this.disabled = true;\n\n    // minor explosions\n    for (let i = 0; i < 20; i++) {\n      const timeDelay = i * 200;\n      if (i % 2 === 0) new Timer(this.game, () => this.game.sounds.add(\"explosion\"), timeDelay);\n\n      new Timer(this.game, () => {\n        const hitBoxes = this.getHitbox();\n        const randHitBox = hitBoxes[i % hitBoxes.length]\n        const randPosX = Math.floor(Math.random() * ((randHitBox.x + randHitBox.width) - randHitBox.x) + randHitBox.x);\n        const randPosY = Math.floor(Math.random() * ((randHitBox.y + randHitBox.height) - randHitBox.y) + randHitBox.y);\n        const dx = (this.velocity[0] < 0 ? 30 : 10)\n        new Explosion(this.game, 80, [randPosX - dx, randPosY - 70], \"minor\", [0, 0.1]);\n      }, timeDelay);\n    }\n\n    // stop for final explosion\n    new Timer(this.game, () => {\n      this.velocity = [0,0];\n      this.speed = 0;\n      this.movementDisabled = true;\n    }, 4000);\n    \n    // final explosion and start timer for setting game win\n    new Timer(this.game, () => {\n      this.game.sounds.playMajorSound(\"bossDeath\");\n      const multiplier = (this.velocity[0] < 0 ? 1 : -1);\n      const posX = this.position[0]-(this.width/2);\n      const posY = this.position[1]-(this.height/1.5);\n      new Explosion(this.game, 500, [posX - 30, posY], \"major\", [0, 0]);\n      super.remove();\n\n      new Timer(this.game, this.game.setWin.bind(this.game), 3500);\n    }, 4500)\n  }\n}\n\nexport default Boss;","// Sound class creates and handles all game sounds\n\nclass Sound {\n  constructor(game) {\n    this.game = game;\n    \n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.audioCtx = new AudioContext();\n    \n    const soundUrls = {\n      // background musics\n      waveBGM: \"src/assets/sounds/wave_bgm.mp3\",\n      bossIncomingBGM: \"src/assets/sounds/boss_incoming_bgm.mp3\",\n      bossBGM: \"src/assets/sounds/boss_bgm.mp3\",\n\n      // major sounds\n      playerDeath: \"src/assets/sounds/player_death.wav\",\n      bossDeath: \"src/assets/sounds/boss_death.mp3\",\n      win: \"src/assets/sounds/win.mp3\",\n      gameOver: \"src/assets/sounds/game_over.mp3\",\n      \n      // normal sounds\n      playerHurt: \"src/assets/sounds/player_hurt.wav\",\n      defaultProjectile: \"src/assets/sounds/default_laser.wav\",\n      playerProjectile: \"src/assets/sounds/player_laser.wav\",\n      enemyProjectile: \"src/assets/sounds/enemy_laser.wav\",\n      bossProjectile: \"src/assets/sounds/boss_projectile.wav\",\n      explosion: \"src/assets/sounds/explosion.wav\"\n    };\n\n    // create audio buffers from each sound file and save as a Sound class property\n    (async () => {\n      for (const key in soundUrls) {\n        const url = soundUrls[key];\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const audioBuffer = await this.audioCtx.decodeAudioData(arrayBuffer);\n        this[key] = audioBuffer;\n      }\n    })();\n\n    this.currentBGM = \"waveBGM\";\n    this.bgm = null;\n    this.bgmPlaying = false;\n\n    this.soundId = 0;\n    this.currentSounds = {};\n\n    this.toggle = false;\n    this.soundOnElement = document.getElementById(\"sound-on\");\n    this.soundOffElement = document.getElementById(\"sound-off\");\n    this.soundTextElement = document.getElementById(\"sound-text\");\n    this.bindToggleListener();\n  }\n\n  // switching the background music, and play on loop\n  // also used to play same background music again after stopping\n  switchBGM(key) {\n    this.currentBGM = key;\n\n    if (!this.toggle) return;\n\n    this.stopBGM();\n    this.bgm = this.audioCtx.createBufferSource();\n    this.bgm.buffer = this[key];\n    this.bgm.connect(this.audioCtx.destination);\n    this.bgm.loop = true;\n    this.bgm.start(0);\n    this.bgmPlaying = true;\n  }\n\n  stopBGM() {\n    if (!this.bgmPlaying) return;\n\n    this.bgm.stop();\n    // this.bgm.disconnect(this.audioCtx.destination);\n    this.bgm = null;\n    this.bgmPlaying = false;\n  }\n\n  // major sounds will stop background music before playing\n  playMajorSound(key) {\n    if (!this.toggle) return;\n    \n    this.stopBGM();\n    this.add(key);\n  }\n\n  // all currently playing normal sounds are kept track of with ids in this.currentSounds\n  // deletes itself from this.currentSounds after finished playing\n  // to be called in other classes as needed\n  add(key) {\n    if (!this.toggle) return;\n\n    const newAudio = this.audioCtx.createBufferSource();\n    newAudio.buffer = this[key];\n    const newAudioVolume = this.audioCtx.createGain();\n    newAudio.connect(newAudioVolume).connect(this.audioCtx.destination);\n\n    if (key === \"enemyProjectile\") newAudioVolume.gain.value = 0.04;\n    else if (key === \"playerDeath\") newAudioVolume.gain.value = 0.2;\n    else if (key === \"win\") newAudioVolume.gain.value = 0.3;\n    else newAudioVolume.gain.value = 1.0;\n\n    const id = this.soundId++\n    const audioObject = {\n      audio: newAudio,\n      volume: newAudioVolume\n    }\n    this.currentSounds[id] = audioObject;\n    \n    newAudio.onended = () => {\n      if (this.currentSounds[id]) {\n        // newAudioVolume.disconnect(this.audioCtx.destination);\n        delete this.currentSounds[id];\n      }\n    }\n\n    newAudio.start(0);\n  }\n  \n  clearCurrentSounds() {\n    for (const id in this.currentSounds) {\n      const soundObject = this.currentSounds[id];\n      soundObject.audio.stop();\n      // soundObject.volume.disconnect(this.audioCtx.destination);\n      soundObject.audio = null;\n      soundObject.volume = null;\n      delete this.currentSounds[id];\n    }\n  }\n\n  // sound toggling\n  toggleOff() {\n    if (this.audioCtx.state !== \"suspended\") this.audioCtx.suspend();\n    this.toggle = false;\n    this.stopBGM();\n    this.clearCurrentSounds();\n  }\n\n  toggleOn() {\n    if (this.audioCtx.state === \"suspended\") this.audioCtx.resume();\n    this.toggle = true;\n\n    if (!this.game.startScreen && !this.game.gameOver && !this.game.win) {\n      this.switchBGM(this.currentBGM);\n    }\n  }\n\n  reset() {\n    this.switchBGM(\"waveBGM\");\n    this.clearCurrentSounds();\n  }\n\n  bindToggleListener() {\n    const soundContainer = document.getElementById(\"sound-icons-container\");\n    soundContainer.addEventListener(\"click\", this.handleSoundToggle.bind(this));\n  }\n\n  handleSoundToggle() {\n    if (this.toggle) {\n      this.toggleOff()\n      this.soundOnElement.style.display = 'none';\n      this.soundOffElement.style.display = 'block'; \n      this.soundTextElement.innerHTML = \"muted\";\n    } else {\n      this.toggleOn()\n      this.soundOnElement.style.display = 'block';\n      this.soundOffElement.style.display = 'none';\n      this.soundTextElement.innerHTML = \"sound on\";\n    }\n  }\n}\n\nexport default Sound;","// Game class handles all game state logic\n\nimport PlayerShip from \"./player_ship\";\nimport EnemyShip from \"./enemy_ship\";\nimport Boss from \"./boss\";\nimport Sound from \"./sound\";\nimport Timer from \"./timer\";\n\nclass Game {\n  static MAX_ENEMY_WAVE = 5;\n\n  constructor(canvas, gameView) {\n    this.canvas = canvas;\n    this.canvasWidth = canvas.width;\n    this.canvasHeight = canvas.height;\n    this.gameView = gameView;\n\n    this.enemyWave = 0;\n    this.addEnemyOnCooldown = true;\n    this.addedEnemies = 0;\n    this.enemiesRemaining = 0;\n    this.enemyWaveCount = 0;\n\n    this.score = 0;\n    this.gameOver = false;\n    this.win = false;\n    this.secretEnd = false;\n    this.startScreen = true;\n\n    // all moving objects and timers have a unique game id\n    this.idCounter = 1;\n    this.timers = {};\n    this.allMovingObjects = {\n      player: {},\n      enemies: {},\n      projectiles: {},\n      explosions: {}\n    };\n\n    this.player = new PlayerShip(this);\n    this.bossFight = false;\n    this.boss = null;\n\n    // all sounds in the game handled with the Sound class\n    this.sounds = new Sound(this);\n  }\n\n  // apply game logic to determine next state of the game for next animation frame\n  // time changes, handled by GameView, are used to smooth gameplay during fps changes\n  step(timeDelta) {\n    this.checkCollisions();\n    if (!this.bossFight) this.setEnemies();\n    this.moveObjects(timeDelta);\n    this.shootProjectiles();\n  }\n\n  pauseTimers() {\n    Object.values(this.timers).forEach(timer => timer.pause());\n  }\n\n  resumeTimers() {\n    Object.values(this.timers).forEach(timer => timer.resume());\n  }\n\n  // call move() for all MovingObject objects\n  moveObjects(timeDelta) {\n    for (let key in this.allMovingObjects) {\n      Object.values(this.allMovingObjects[key]).forEach(obj => obj.move(timeDelta));\n    }\n  }\n\n  // call shoot() for all Ship objects (player and enemies)\n  shootProjectiles() {\n    this.player.shootProjectile();\n    Object.values(this.allMovingObjects.enemies).forEach(enemy => enemy.shootProjectile());\n  }\n\n  // first check projectile collisions, then check player to enemy ship collisions\n  checkCollisions() {\n    Object.values(this.allMovingObjects.projectiles).forEach(projectile => {\n      if (projectile.origin === \"player\") {\n        Object.values(this.allMovingObjects.enemies).forEach(enemy => {\n          enemy.collideCheck(projectile);\n        })\n      } else {\n        this.player.collideCheck(projectile);\n      }\n    })\n    \n    Object.values(this.allMovingObjects.enemies).forEach(enemy => {\n      this.player.collideCheck(enemy);\n    })\n  }\n\n  // heal player 3hp per round (up to max health)\n  healPlayer() {\n    if (this.allMovingObjects.player && this.player.health > 0) {\n      this.player.health = Math.min(this.player.health + 3, PlayerShip.MAX_HEALTH)\n    }\n  }\n\n  // next wave if 0 enemies remaining, activate boss fight if last wave finished\n    // increases enemies per wave\n    // multiply score by remaining player health, and then heal player\n  setEnemies() {\n    if (this.enemiesRemaining === 0) {\n      if (this.enemyWave < Game.MAX_ENEMY_WAVE) {\n        this.enemyWave += 1;\n        this.enemyWaveCount = this.enemyWave * 5;\n        this.enemiesRemaining = this.enemyWaveCount;\n        this.addedEnemies = 0;\n\n        if (this.enemyWave > 1) {\n          this.score += (this.player.health * 100);\n          this.healPlayer();\n        }\n      } else {\n        this.setBoss();\n      }\n    }\n\n    // throughout a wave, enemies are placed in clusters of 3 to 10 at different intervals\n    if (!this.addEnemyOnCooldown) {\n      const remaining = this.enemyWaveCount - this.addedEnemies;\n\n      let numNewEnemies;\n      if (remaining < 10) {\n        numNewEnemies = remaining;\n      } else {\n        numNewEnemies = Math.floor(Math.random() * (10 - 3) + 3);\n      }\n      this.addedEnemies += numNewEnemies;\n\n      // randomize position, speed, and shoot cooldown for each enemy\n      for (let i = 0; i < numNewEnemies; i++) {\n        const randPosX = Math.floor(Math.random() * this.canvasWidth);\n        const randSpeed = Math.random() * (5 - 2) + 2;\n        const randCooldown = Math.floor(Math.random() * (1000 - 450) + 450);\n        new EnemyShip(this, randPosX, randSpeed, randCooldown);\n      }\n\n      // set cooldown before adding next group of enemies, reset flag in 1 to 3 seconds\n      this.addEnemyOnCooldown = true;\n      const randTimeOut = Math.random() * (3000 - 1000) + 1000;\n      new Timer(this, this.resetAddEnemyCooldown.bind(this), randTimeOut);\n    }\n  }\n\n  resetAddEnemyCooldown() {\n    this.addEnemyOnCooldown = false;\n  }\n\n  // waits for all player projectiles to clear, and temporarily disable player (for cutscene to play) \n  // also heal player and update score\n  setBoss() {\n    this.player.disabled = true;\n    if (Object.values(this.allMovingObjects.projectiles).length === 0) {\n      this.sounds.switchBGM(\"bossIncomingBGM\");\n      this.boss = new Boss(this);\n      this.score += (this.player.health * 100);\n      this.healPlayer();\n      this.bossFight = true;\n      this.gameView.switchGameInformation();\n    }\n  }\n\n  // secret ending if both player and boss die\n  setWin() {\n    if (this.player?.health <= 0) this.secretEnd = true;\n\n    if (!this.gameOver) {\n      this.score += (this.player.health * 200);\n      this.win = true;\n      this.sounds.playMajorSound(\"win\");\n    }\n  }\n\n  setGameOver() {\n    if (this.boss?.health <= 0) {\n      this.secretEnd = true;\n    } else if (!this.win) {\n      this.gameOver = true;\n      this.sounds.playMajorSound(\"gameOver\");\n    }\n  }\n\n  // resetting the game on retries\n  reset() {\n    this.enemyWave = 0;\n    this.addEnemyOnCooldown = true;\n    this.addedEnemies = 0;\n    this.enemiesRemaining = 0;\n    this.enemyWaveCount = 0;\n    this.score = 0;\n    \n    this.gameOver = false;\n    this.win = false;\n    this.secretEnd = false;\n    this.startScreen = false;\n    \n    for (const id in this.timers) delete this.timers[id];\n    for (const type in this.allMovingObjects) {\n      for (const id in this.allMovingObjects[type]) {\n        delete this.allMovingObjects[type][id];\n      }\n    }\n    this.idCounter = 1;\n\n    this.player = new PlayerShip(this);\n    this.boss = null;\n    this.bossFight = false;\n    this.gameView.switchGameInformation();\n\n    this.sounds.reset();\n  }\n}\n\nexport default Game;","// GameView handles anything canvas/html related, and event handlers\n// Also creates the single Game object that handles all game logic\n\nimport Game from \"./game\";\nimport Boss from \"./boss\";\n\nclass GameView {\n  // player movement keybind mappings\n  static UP_KEYS = [\"ArrowUp\", 'w']\n  static DOWN_KEYS = [\"ArrowDown\", 's']\n  static RIGHT_KEYS = [\"ArrowRight\", 'd']\n  static LEFT_KEYS = [\"ArrowLeft\", 'a']\n\n  // prevent shooting when clicking these html elements\n  static IGNORE_TARGETS = [\n    \"sound-on\", \n    \"sound-off\", \n    \"sound-icons-container\", \n    \"touch-on\", \n    \"touch-off\", \n    \"touch-container\",\n    \"pause-on\", \n    \"pause-off\", \n    \"pause-container\"\n  ]\n\n  constructor(canvas, canvasContext) {\n    this.ctx = canvasContext;\n    this.canvas = canvas;\n    this.canvasWidth = canvas.width;\n    this.canvasHeight = canvas.height;\n    this.game = new Game(canvas, this);\n\n    // html game info elements that get updated throughout the game\n    this.scoreSpan = document.getElementById(\"score\");\n    this.playerHealthBar = document.getElementById(\"player-health-bar\");\n    this.bossHealthBar = document.getElementById(\"boss-health-bar\");\n    this.bossInfo = document.getElementById(\"boss-info\");\n    this.waveInfo = document.getElementById(\"wave-info\");\n    this.waveSpan = document.getElementById(\"wave-number\");\n    this.enemiesRemainingSpan = document.getElementById(\"enemies-remaining\");\n\n    // moving background in the canvas element\n    // x, y are the background position offsets as it moves (only y changes)\n    // dy controls change in speed\n    const backgroundImg = new Image();\n    backgroundImg.src = \"src/assets/images/game_background.png\";\n    this.bgSettings = {\n      img: backgroundImg,\n      x: 0,\n      y: 700,\n      dy: 0.5\n    }\n\n    // mouse follow options\n    this.touchOnElement = document.getElementById(\"touch-on\");\n    this.touchOffElement = document.getElementById(\"touch-off\");\n    this.mouseFollow = false;\n    this.mousePosition = null; // {x: xValue, y: yValue}\n    \n    // pause options\n    this.pauseOnElement = document.getElementById(\"pause-on\");\n    this.pauseOffElement = document.getElementById(\"pause-off\");\n    this.pauseText = document.getElementById(\"pause-text\");\n    this.pause = false;\n    this.toggleSound = false;\n\n    // only want to draw start, win, and game over messages once;\n    this.messageDrawn = false;\n\n    this.bindSettingListeners();\n    this.bindStartHandler();\n  }\n  \n  // starts up the animate recursive call loop, and draws initial background\n  start() {\n    this.lastTime = 0;\n    this.drawBackground();\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  // draw next state of the game, or start/win/game over message\n  // takes in time, which is automatically given and kept track off in recursive calls\n  animate(time) {\n    if (this.game.startScreen || this.game.gameOver || this.game.win) {\n      if (this.pause) this.handlePauseToggle();\n      this.drawStartWinGameOver();\n    } else if (!this.pause) {\n      this.draw();\n      this.updateGameInfo();\n      const timeDelta = time - this.lastTime;\n      this.game.step(timeDelta);\n    }\n\n    this.lastTime = time;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  // draw start/win/game over message once and remove player controls\n  drawStartWinGameOver() {\n    if (!this.messageDrawn) {\n      const message = this.game.startScreen \n                      ?  [\"Clique pra começar\", \"COMEÇAR\"]\n                      : this.game.secretEnd\n                        ? \"🫡\"\n                        : this.game.gameOver\n                          ? \"PERDEU O JOGO\"\n                          : \"VENCEU O JOGO\"\n\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillStyle = \"white\";\n\n      if (this.game.startScreen) {\n        this.ctx.font = \"40px roboto\";\n        this.ctx.fillText(message[0], this.canvasWidth/2, this.canvasHeight/2 - 50);\n        this.ctx.font = \"48px roboto\";\n        this.ctx.fillText(message[1], this.canvasWidth/2, this.canvasHeight/2);\n      } else {\n        this.ctx.font = \"48px roboto\";\n        this.ctx.fillText(message, this.canvasWidth/2, this.canvasHeight/2);\n      }\n      this.messageDrawn = true;\n\n      if (this.game.gameOver || this.game.win) {\n        this.removeControlHandlers();\n        this.updateScore();\n        setTimeout(this.drawRetryKey.bind(this, this.ctx), 3000)\n      };\n    }\n  }\n\n  drawRetryKey() {\n    const message = \"(CLIQUE NA TELA)\";\n    this.ctx.font = \"24px roboto\";\n    this.ctx.fillText(message, this.canvasWidth/2, this.canvasHeight/2 + 50);\n    this.bindRetryHandler();\n  }\n\n  drawPause() {\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"48px roboto\";\n    this.ctx.fillText(\"PAUSADO\", this.canvasWidth/2, this.canvasHeight/2);\n  }\n\n  // draw moving background and then all game objects\n  draw() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.drawBackground();\n\n    for (let key in this.game.allMovingObjects) {\n      Object.values(this.game.allMovingObjects[key]).forEach(obj => obj.draw(this.ctx));\n    }\n  }\n\n  // canvas background moves vertically downward\n  drawBackground() {\n    const img = this.bgSettings.img;\n\n    // if end is reached, reset image back to beginning\n    if (this.bgSettings.y > this.canvasHeight) {\n      this.bgSettings.y -= img.height;\n    }\n\n    // if looping around, cut remaining end and draw below new\n    if (this.bgSettings.y > 0) {\n      this.ctx.drawImage(img, this.bgSettings.x, this.bgSettings.y - img.height, img.width, img.height);\n    }\n\n    // draw background and then update new position\n    this.ctx.drawImage(img, this.bgSettings.x, this.bgSettings.y, img.width, img.height);\n    this.bgSettings.y += this.bgSettings.dy;\n  }\n\n  // updates all game info related html elements\n  updateGameInfo() {\n    this.updateScore();\n    this.updateHealthBar('player');\n\n    if (this.game.bossFight) {\n      this.updateHealthBar('boss');\n    } else {\n      this.waveSpan.innerText = this.game.enemyWave;\n      this.enemiesRemainingSpan.innerText = this.game.enemiesRemaining;\n    }\n  }\n\n  updateScore() {\n    this.scoreSpan.innerText = this.game.score;\n  }\n\n  // updates either boss or player hp\n  // type is a string of either 'player' or 'boss'\n  updateHealthBar(type) {\n    let obj, healthBar;\n    if (type === 'player') {\n      obj = this.game.player;\n      healthBar = this.playerHealthBar;\n    } else {\n      obj = this.game.boss;\n      healthBar = this.bossHealthBar;\n    }\n    let health = obj.health;\n\n    const healthPoint = document.createElement(\"li\");\n    healthPoint.setAttribute(\"class\", `${type}-health-point`);\n\n    if (type === 'boss') health = Math.ceil(health / (Boss.MAX_HEALTH / 10));\n\n    if (healthBar.children.length < health) {\n      for (let i = 0; i < health - healthBar.children.length; i++) {\n        healthBar.appendChild(healthPoint);\n      }\n    } else if ((healthBar.children.length > health)) {\n      for (let i = 0; i < healthBar.children.length - health; i++) {\n        const lastChild = healthBar.lastChild;\n        if (lastChild) healthBar.removeChild(healthBar.lastChild);\n      }\n    }\n  }\n\n  // switches between boss and enemy wave html elements \n  switchGameInformation() {\n    if (this.game.bossFight) {\n      this.waveInfo.style.display = \"none\";\n      this.bossInfo.style.display = \"flex\";\n    } else {\n      this.waveInfo.style.display = \"flex\";\n      this.bossInfo.style.display = \"none\";\n    }\n  }\n\n  // start playing the game\n  handleStartKey(event) {\n    if (event?.key === \" \") event.preventDefault();\n\n    this.canvas.scrollIntoView();\n    this.game.sounds.switchBGM(\"waveBGM\");\n    this.game.startScreen = false;\n    document.removeEventListener(\"keypress\", this.startHandler)\n    this.canvas.removeEventListener(\"pointerdown\", this.startHandler)\n    this.bindControlHandlers();\n    setTimeout(this.game.resetAddEnemyCooldown.bind(this.game), 1500);\n    this.messageDrawn = false;\n  }\n\n  bindStartHandler() {\n    this.startHandler = this.handleStartKey.bind(this);\n    document.addEventListener(\"keypress\", this.startHandler);\n    this.canvas.addEventListener(\"pointerdown\", this.startHandler);\n  }\n\n  // retry on win/game over\n  handleRetryKey(event) {\n    if (event?.key === \" \") event.preventDefault();\n\n    this.canvas.scrollIntoView();\n    document.removeEventListener(\"keypress\", this.retryHandler);\n    this.canvas.removeEventListener(\"pointerdown\", this.retryHandler);\n    this.game.reset();\n    this.bindControlHandlers();\n    setTimeout(this.game.resetAddEnemyCooldown.bind(this.game), 1500);\n    this.messageDrawn = false;\n  }\n\n  bindRetryHandler() {\n    this.retryHandler = this.handleRetryKey.bind(this);\n    document.addEventListener(\"keypress\", this.retryHandler);\n    this.canvas.addEventListener(\"pointerdown\", this.retryHandler);\n  }\n\n  // mouse/touch follow movements\n  handleMouseMove(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    const xScale = this.canvas.width / rect.width;\n    const yScale = this.canvas.height / rect.height;\n    const x = (event.clientX - rect.left) * xScale;\n    const y = (event.clientY - rect.top) * yScale;\n    this.mousePosition = {x, y};\n  }\n\n  handleMouseOut() {\n    this.mousePosition = null;\n  }\n\n  handleMouseFollowToggle() {\n    if (this.mouseFollow) {\n      this.touchOnElement.style.display = 'none';\n      this.touchOffElement.style.display = 'block';\n    } else {\n      this.touchOnElement.style.display = 'block';\n      this.touchOffElement.style.display = 'none';\n    }\n\n    this.mouseFollow = !this.mouseFollow;\n  }\n\n  // pause/unpause\n  handlePauseToggle() {\n    if ((this.game.startScreen || this.game.gameOver || this.game.win) && !this.pause) {\n      return;\n    }\n\n    if (this.pause) {\n      this.game.resumeTimers();\n      this.pauseOnElement.style.display = 'none';\n      this.pauseOffElement.style.display = 'block';\n      this.pauseText.innerText = 'pause';\n    } else {\n      this.game.pauseTimers();\n      this.pauseOnElement.style.display = 'block';\n      this.pauseOffElement.style.display = 'none';\n      this.pauseText.innerText = 'play';\n      this.drawPause();\n    }\n\n    this.pause = !this.pause;\n  }\n\n  // pause and mute when tabbed out or game is out of focus\n  handleVisibilityChange() {\n    if (\n      document.hidden && \n      !(this.game.startScreen || this.game.gameOver || this.game.win) && \n      !this.pause\n    ) {\n      this.handlePauseToggle();\n    }\n\n    if (document.hidden && this.game.sounds.toggle) {\n      this.game.sounds.handleSoundToggle();\n      this.toggleSound = true;\n    } else if (!document.hidden && this.toggleSound) {\n      this.game.sounds.handleSoundToggle();\n      this.toggleSound = false;\n    }\n  }\n\n  // setting option keybinds\n  handleSettingKeybinds(event) {\n    if (event.key === \"m\") this.handleMouseFollowToggle();\n    else if (event.key === \"k\") this.game.sounds.handleSoundToggle();\n    else if (event.key === \"p\") this.handlePauseToggle();\n  }\n\n  // binds all setting related handlers (pause/unpause, mouse/touch follow, mute/unmute)\n  bindSettingListeners() {\n    document.addEventListener(\"keydown\", this.handleSettingKeybinds.bind(this));\n\n    const touchContainer = document.getElementById(\"touch-icons-container\");\n    touchContainer.addEventListener(\"click\", this.handleMouseFollowToggle.bind(this));\n    if (( 'ontouchstart' in window ) || ( navigator.maxTouchPoints > 0 ) || ( navigator.msMaxTouchPoints > 0 )) {\n      document.getElementById(\"touch-text\").innerText = \"touch follow\"\n      this.handleMouseFollowToggle();\n    }\n\n    const pauseContainer = document.getElementById(\"pause-icons-container\");\n    pauseContainer.addEventListener(\"click\", this.handlePauseToggle.bind(this));\n    document.addEventListener(\"visibilitychange\", this.handleVisibilityChange.bind(this));\n  }\n\n  // player controls (arrow/wasd to move, spacebar to shoot)\n  handleKeyDown(event) {\n    event.preventDefault();\n\n    if (GameView.RIGHT_KEYS.includes(event.key)) this.game.player.keysPressed.right = true;\n    else if (GameView.LEFT_KEYS.includes(event.key)) this.game.player.keysPressed.left = true;\n    else if (GameView.UP_KEYS.includes(event.key)) this.game.player.keysPressed.up = true;\n    else if (GameView.DOWN_KEYS.includes(event.key)) this.game.player.keysPressed.down = true;\n    else if (event.key === \" \") this.game.player.keysPressed.shoot = true;\n  }\n  \n  handleKeyUp(event) {\n    event.preventDefault();\n\n    if (GameView.RIGHT_KEYS.includes(event.key)) this.game.player.keysPressed.right = false;\n    else if (GameView.LEFT_KEYS.includes(event.key)) this.game.player.keysPressed.left = false;\n    else if (GameView.UP_KEYS.includes(event.key)) this.game.player.keysPressed.up = false;\n    else if (GameView.DOWN_KEYS.includes(event.key)) this.game.player.keysPressed.down = false;\n    else if (event.key === \" \") this.game.player.keysPressed.shoot = false;\n  }\n\n  // mouse click/hold to shoot\n  handleMouseDown(event) {\n    const parentId = event.target.parentNode.id;\n    if (!GameView.IGNORE_TARGETS.includes(parentId)) this.game.player.keysPressed.shoot = true;\n  }\n\n  handleMouseUp() {\n    this.game.player.keysPressed.shoot = false;\n  }\n\n  // binding and removing player controls\n  bindControlHandlers() {\n    this.keyDownHandler = this.handleKeyDown.bind(this);\n    this.keyUpHandler = this.handleKeyUp.bind(this);\n    this.mouseDownHandler = this.handleMouseDown.bind(this);\n    this.mouseUpHandler = this.handleMouseUp.bind(this);\n    this.mouseMoveHandler = this.handleMouseMove.bind(this);\n    this.mouseOutHandler = this.handleMouseOut.bind(this);\n\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    document.addEventListener(\"keyup\", this.keyUpHandler);\n    document.addEventListener(\"pointerdown\", this.mouseDownHandler);\n    document.addEventListener(\"pointerup\", this.mouseUpHandler);\n    document.addEventListener(\"pointermove\", this.mouseMoveHandler);\n    document.addEventListener(\"pointerout\", this.mouseOutHandler);\n  }\n\n  removeControlHandlers() {\n    document.removeEventListener(\"keydown\", this.keyDownHandler);\n    document.removeEventListener(\"keyup\", this.keyUpHandler);\n    document.removeEventListener(\"pointerdown\", this.mouseDownHandler);\n    document.removeEventListener(\"pointerup\", this.mouseUpHandler);\n    document.removeEventListener(\"pointermove\", this.mouseMoveHandler);\n    document.removeEventListener(\"pointerout\", this.mouseOutHandler);\n  }\n}\n\nexport default GameView;","import GameView from \"./scripts/game_view\";\n\nconst preloadedImages = [];\nconst imageUrls = [\n  \"src/assets/images/boss1.png\",\n  \"src/assets/images/enemy_projectile.png\",\n  \"src/assets/images/enemy1.png\",\n  \"src/assets/images/enemy2.png\",\n  \"src/assets/images/enemy3.png\",\n  \"src/assets/images/player_projectile.png\",\n  \"src/assets/images/player1.png\",\n  \"src/assets/images/game_background.png\",\n  \"src/assets/images/explosion1.png\",\n  \"src/assets/images/explosion2.png\"\n]\n\nimageUrls.forEach((url, i) => {\n  preloadedImages[i] = new Image();\n  preloadedImages[i].src = url;\n})\n\nwindow.addEventListener(\"load\", () => {\n  window.canvas = document.getElementById(\"game-view\");\n  window.ctx = canvas.getContext(\"2d\");\n  const view = new GameView(canvas, ctx);\n  view.start()\n});\n"],"names":["vectorScale","vector","newMagnitude","scale","Math","sqrt","MovingObject","static","constructor","argsObject","this","position","velocity","speed","health","game","width","height","image","type","rotationAngle","id","idCounter","allMovingObjects","draw","ctx","x","y","centerX","centerY","save","translate","rotate","PI","drawImage","restore","collideCheck","otherObj","hitBoxCollisions","getHitbox","forEach","thisBox","idx","some","otherBox","box2","box1","push","length","handleCollided","otherObjClass","name","damage","remove","damageTaken","move","timeDelta","updateVelocity","velocityScale","NORMAL_FRAME_TIME_DELTA","offsetX","offsetY","newX","newY","handleBounds","newPosition","inUpperYHeightBounds","canvasHeight","inUpperYBounds","inLowerYBounds","inYBounds","inUpperXBounds","inLowerXBounds","canvasWidth","inXBounds","inBounds","args","objArgs","super","origin","callback","delay","timers","timerCallback","startTime","Date","now","timeoutId","setTimeout","bind","pause","clearTimeout","resume","clear","projectileArgs","patternArgs","shootProjectile","pattern","onCooldown","i","batchFireNum","Timer","positionDeltas","delta","dx","dy","startPosition","projArgs","projectileArgIndex","Projectile","batchFireInterval","projSound","projectileSound","playShootSound","batchCooldownOffset","timer","resetCooldown","cooldown","sounds","add","index","size","explosionType","velocityDelta","document","createElement","src","maxFrames","imgSize","cutSize","frame","yOffset","floor","xOffset","PlayerShip","Ship","SPEED","MAX_HEALTH","keysPressed","up","down","left","right","shoot","disabled","invincible","newVelocity","gameView","mouseFollow","mousePosition","xDiff","yDiff","deadzone","min","abs","resetInvincibility","posX","posY","Explosion","playMajorSound","setGameOver","score","enemiesRemaining","Boss","hitboxesCollided","includes","movementDisabled","switchBGM","player","updateShootingPattern","timeDelay","hitBoxes","randHitBox","randPosX","random","randPosY","setWin","AudioContext","window","webkitAudioContext","audioCtx","soundUrls","waveBGM","bossIncomingBGM","bossBGM","playerDeath","bossDeath","win","gameOver","playerHurt","defaultProjectile","playerProjectile","enemyProjectile","bossProjectile","explosion","key","url","response","fetch","arrayBuffer","audioBuffer","decodeAudioData","currentBGM","bgm","bgmPlaying","soundId","currentSounds","toggle","soundOnElement","getElementById","soundOffElement","soundTextElement","bindToggleListener","stopBGM","createBufferSource","buffer","connect","destination","loop","start","stop","newAudio","newAudioVolume","createGain","gain","value","audioObject","audio","volume","onended","clearCurrentSounds","soundObject","toggleOff","state","suspend","toggleOn","startScreen","reset","addEventListener","handleSoundToggle","style","display","innerHTML","Game","canvas","enemyWave","addEnemyOnCooldown","addedEnemies","enemyWaveCount","secretEnd","enemies","projectiles","explosions","bossFight","boss","Sound","step","checkCollisions","setEnemies","moveObjects","shootProjectiles","pauseTimers","Object","values","resumeTimers","obj","enemy","projectile","healPlayer","MAX_ENEMY_WAVE","setBoss","remaining","numNewEnemies","randSpeed","randCooldown","EnemyShip","randTimeOut","resetAddEnemyCooldown","switchGameInformation","GameView","canvasContext","scoreSpan","playerHealthBar","bossHealthBar","bossInfo","waveInfo","waveSpan","enemiesRemainingSpan","backgroundImg","Image","bgSettings","img","touchOnElement","touchOffElement","pauseOnElement","pauseOffElement","pauseText","toggleSound","messageDrawn","bindSettingListeners","bindStartHandler","lastTime","drawBackground","requestAnimationFrame","animate","time","handlePauseToggle","drawStartWinGameOver","updateGameInfo","message","textAlign","fillStyle","font","fillText","removeControlHandlers","updateScore","drawRetryKey","bindRetryHandler","drawPause","clearRect","updateHealthBar","innerText","healthBar","healthPoint","setAttribute","ceil","children","appendChild","lastChild","removeChild","handleStartKey","event","preventDefault","scrollIntoView","removeEventListener","startHandler","bindControlHandlers","handleRetryKey","retryHandler","handleMouseMove","rect","getBoundingClientRect","xScale","yScale","clientX","clientY","top","handleMouseOut","handleMouseFollowToggle","handleVisibilityChange","hidden","handleSettingKeybinds","navigator","maxTouchPoints","msMaxTouchPoints","handleKeyDown","RIGHT_KEYS","LEFT_KEYS","UP_KEYS","DOWN_KEYS","handleKeyUp","handleMouseDown","parentId","target","parentNode","IGNORE_TARGETS","handleMouseUp","keyDownHandler","keyUpHandler","mouseDownHandler","mouseUpHandler","mouseMoveHandler","mouseOutHandler","preloadedImages","getContext"],"sourceRoot":""}